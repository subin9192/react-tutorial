import { Transaction, TransactionContext } from '@sentry/types';
import React from 'react';
import { Action, Location } from './types';
interface NonIndexRouteObject {
    caseSensitive?: boolean;
    children?: RouteObject[];
    element?: React.ReactNode | null;
    index?: false;
    path?: string;
}
interface IndexRouteObject {
    caseSensitive?: boolean;
    children?: undefined;
    element?: React.ReactNode | null;
    index?: true;
    path?: string;
}
declare type RouteObject = IndexRouteObject | NonIndexRouteObject;
declare type UseRoutes = (routes: RouteObject[], locationArg?: Partial<Location> | string) => React.ReactElement | null;
declare type UseEffect = (cb: () => void, deps: unknown[]) => void;
declare type UseLocation = () => Location;
declare type UseNavigationType = () => Action;
declare type RouteObjectArrayAlias = any;
declare type RouteMatchAlias = any;
declare type CreateRoutesFromChildren = (children: JSX.Element[]) => RouteObjectArrayAlias;
declare type MatchRoutes = (routes: RouteObjectArrayAlias, location: Location) => RouteMatchAlias[] | null;
export declare function reactRouterV6Instrumentation(useEffect: UseEffect, useLocation: UseLocation, useNavigationType: UseNavigationType, createRoutesFromChildren: CreateRoutesFromChildren, matchRoutes: MatchRoutes): (customStartTransaction: (context: TransactionContext) => Transaction | undefined, startTransactionOnPageLoad?: boolean, startTransactionOnLocationChange?: boolean) => void;
export declare function withSentryReactRouterV6Routing<P extends Record<string, any>, R extends React.FC<P>>(Routes: R): R;
export declare function wrapUseRoutes(origUseRoutes: UseRoutes): UseRoutes;
export {};
//# sourceMappingURL=reactrouterv6.d.ts.map